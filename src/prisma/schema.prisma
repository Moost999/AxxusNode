generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String         @unique
  password          String
  tokens            Int            @default(0)
  availableMessages Int            @default(50)
  adViews           Int            @default(0)
  lastAdView        DateTime?
  adCooldown        Int            @default(24)
  geminiApiKey      String?        @unique
  groqApiKey        String?        @unique
  assistants        Assistant[]
  notifications     Notification[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Assistant {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  model          String
  personality    String
  instructions   String
  whatsappNumber String?
  activeChats    Chat[]   @relation("ActiveChats")
  archivedChats  Chat[]   @relation("ArchivedChats")
  files          File[]
  leads          Lead[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  from         String
  messages     Json
  pdfSummary   String?
  fileId       String?    @db.ObjectId
  lastActivity DateTime
  assistant    Assistant  @relation("ActiveChats", fields: [assistantId], references: [id])
  assistantId  String     @db.ObjectId
  archivedBy   Assistant? @relation("ArchivedChats", fields: [archivedById], references: [id])
  archivedById String?    @db.ObjectId
}

model File {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  content     Bytes     @db.BinData
  summary     String?
  uploadedAt  DateTime  @default(now())
  assistant   Assistant @relation(fields: [assistantId], references: [id])
  assistantId String    @db.ObjectId
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  type      String // "Assistente Criado", "Reward de ADS"
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  metadata  Json? // Dados extras (ex: tokenAmount)
}

model Lead {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phone       String
  assistantId String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   assistant Assistant @relation(fields: [assistantId], references: [id])

  // Adicione esta linha para criar a chave única composta
  @@unique([phone, assistantId], name: "phone_assistantId")

  // Mantenha o relacionamento se necessário
}
